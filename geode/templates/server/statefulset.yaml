{{- $locatorReplicaCount := int .Values.locator.replicaCount }}
{{- $serverReplicaCount := int .Values.server.replicaCount }}
{{- $fullname := include "common.names.fullname" . }}
{{- $releaseNamespace := .Release.Namespace }}
{{- $clusterDomain := .Values.clusterDomain }}
{{- $locatorPort := int .Values.locator.service.ports.locator }}
{{- $locatorSvc := printf "%s-locator.%s.svc.%s[%d]" $fullname $releaseNamespace $clusterDomain $locatorPort }}
{{- $locators := list }}
{{- range $e, $i := until $locatorReplicaCount }}
{{- $locators = append $locators (printf "%s-locator-%d.%s-locator-hl.%s.svc.%s[%d]" $fullname $i $fullname $releaseNamespace $clusterDomain $locatorPort) }}
{{- end }}
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ printf "%s-server" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: server
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.server.replicaCount }}
  podManagementPolicy: {{ .Values.server.podManagementPolicy }}
  selector:
    matchLabels: {{ include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: server
  serviceName: {{ printf "%s-server-hl" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}
  {{- if .Values.server.updateStrategy }}
  updateStrategy: {{- toYaml .Values.server.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      annotations:
        {{- if .Values.server.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.server.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
        {{- if (include "geode.createSecret" .) }}
        checksum/auth-secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- end }}
        {{- if (include "geode.server.createConfigmap" .) }}
        checksum/configuration: {{ include (print $.Template.BasePath "/server/configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if (include "geode.server.log4j.createConfigmap" .) }}
        checksum/log4j-configuration: {{ include (print $.Template.BasePath "/server/log4j-configmap.yaml") . | sha256sum }}
        {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: server
        {{- if .Values.server.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.server.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "geode.serviceAccountName" . }}
      {{- include "geode.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.server.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.server.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.server.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.server.podAffinityPreset "component" "server" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.server.podAntiAffinityPreset "component" "server" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.server.nodeAffinityPreset.type "key" .Values.server.nodeAffinityPreset.key "values" .Values.server.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.server.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.server.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.server.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.server.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.priorityClassName }}
      priorityClassName: {{ .Values.server.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.server.schedulerName }}
      schedulerName: {{ .Values.server.schedulerName }}
      {{- end }}
      {{- if .Values.server.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.server.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.server.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.server.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-for-locators
          image: {{ include "geode.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.server.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.server.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
            - name: GEODE_LOCATORS
              value: {{ join "," $locators | quote }}
            {{- if .Values.auth.enabled }}
            - name: GEODE_SECURITY_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "geode.secretName" . }}
                  key: username
            - name: GEODE_SECURITY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "geode.secretName" . }}
                  key: password
            {{- end }}
          command:
            - /bin/bash
          args:
            - -ec
            - |
              . /opt/bitnami/scripts/libgeode.sh
              declare -a locators
              read -r -a locators <<< "$(tr ',;' ' ' <<< "${GEODE_LOCATORS/%,/}")"
              for l in "${locators[@]}"; do
                  geode_wait_for_locator_connection "$l" "${GEODE_SECURITY_USERNAME:-}" "${GEODE_SECURITY_PASSWORD:-}"
              done
        {{- if .Values.volumePermissions.enabled }}
        - name: volume-permissions
          image: {{ include "geode.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - /bin/bash
          args:
            - -ec
            - |
              mkdir -p /bitnami/geode/config /bitnami/geode/data
              chmod 700 /bitnami/geode/config /bitnami/geode/data
              find /bitnami/geode -mindepth 1 -maxdepth 1 -not -name "config" -not -name ".snapshot" -not -name "lost+found" | xargs chown -R {{ .Values.server.containerSecurityContext.runAsUser }}:{{ .Values.server.podSecurityContext.fsGroup }}
          {{- if .Values.volumePermissions.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.volumePermissions.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /bitnami/geode
        {{- end }}
        {{- if .Values.server.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.server.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: geode
          image: {{ include "geode.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.server.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.server.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.server.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.server.command "context" $) | nindent 12 }}
          {{- else }}
          command:
            - /bin/bash
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.server.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.server.args "context" $) | nindent 12 }}
          {{- else }}
          args:
            - -ec
            - |
              {{- if .Values.auth.tls.enabled }}
              ID="${MY_POD_NAME#"{{ $fullname }}-"}"
              mkdir -p /opt/bitnami/geode/config/certs
              if [[ -f "/certs/geode.truststore.jks" ]] && [[ -f "/certs/geode-server-${ID}.truststore.jks" ]]; then
                  cp "/certs/geode.truststore.jks" "/opt/bitnami/geode/config/certs/geode-truststore.jks
                  cp "/certs/geode-server-${ID}.truststore.jks" "/opt/bitnami/geode/config/certs/geode.keystore.jks"
              else
                  echo "Couldn't find the expected Java Key Stores (JKS) files! They are mandatory when encryption via TLS is enabled."
                  exit 1
              fi
              {{- end }}
              /opt/bitnami/scripts/geode/entrypoint.sh /opt/bitnami/scripts/geode/run.sh {{ join " " .Values.server.extraFlags }}
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: GEODE_NODE_NAME
              value: "$(MY_POD_NAME)"
            - name: GEODE_NODE_TYPE
              value: "server"
            - name: GEODE_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).{{ $fullname }}-server-hl.{{ $releaseNamespace }}.svc.{{ $clusterDomain }}"
            - name: GEODE_LOCATORS
              value: {{ join "," $locators | quote }}
            {{- if .Values.groups }}
            - name: GEODE_GROUPS
              value: {{ join "," .Values.groups | quote }}
            {{- end }}
            - name: GEODE_SERVER_PORT_NUMBER
              value: {{ .Values.server.containerPorts.server | quote }}
            - name: GEODE_HTTP_PORT_NUMBER
              value: {{ .Values.server.containerPorts.http | quote }}
            - name: GEODE_RMI_PORT_NUMBER
              value: {{ .Values.server.containerPorts.rmi | quote }}
            - name: GEODE_ENABLE_METRICS
              value: {{ ternary "yes" "no" .Values.metrics.enabled | quote }}
            {{- if .Values.metrics.enabled }}
            - name: GEODE_METRICS_PORT_NUMBER
              value: {{ .Values.server.containerPorts.metrics | quote }}
            {{- end }}
            - name: GEODE_LOG_LEVEL
              value: {{ .Values.server.logLevel | quote }}
            {{- if .Values.server.initialHeapSize }}
            - name: GEODE_INITIAL_HEAP_SIZE
              value: {{ .Values.server.initialHeapSize | quote }}
            {{- end }}
            {{- if .Values.server.maxHeapSize }}
            - name: GEODE_MAX_HEAP_SIZE
              value: {{ .Values.server.maxHeapSize | quote }}
            {{- end }}
            - name: GEODE_ENABLE_SECURITY
              value: {{ ternary "yes" "no" (or .Values.auth.enabled .Values.auth.tls.enabled) | quote }}
            {{- if .Values.auth.enabled }}
            - name: GEODE_SECURITY_MANAGER
              value: {{ .Values.auth.securityManager | quote }}
            - name: GEODE_SECURITY_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "geode.secretName" . }}
                  key: username
            - name: GEODE_SECURITY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "geode.secretName" . }}
                  key: password
            {{- end }}
            {{- if .Values.auth.tls.enabled }}
            - name: GEODE_SECURITY_TLS_COMPONENTS
              value: {{ join "," .Values.auth.tls.components | quote }}
            - name: GEODE_SECURITY_TLS_REQUIRE_AUTHENTICATION
              value: {{ ternary "yes" "no" .Values.auth.tls.requireAuthentication | quote }}
            - name: GEODE_SECURITY_TLS_ENDPOINT_IDENTIFICATION_ENABLED
              value: {{ ternary "yes" "no" .Values.auth.tls.endpointIdentificationEnabled | quote }}
            {{- if not (empty .Values.auth.tls.keystorePassword) }}
            - name: GEODE_SECURITY_TLS_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "geode.secretName" . }}
                  key: keystore-password
            {{- end }}
            {{- if not (empty .Values.auth.tls.truststorePassword) }}
            - name: GEODE_SECURITY_TLS_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "geode.secretName" . }}
                  key: truststore-password
            {{- end }}
            {{- end }}
            {{- if .Values.server.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.server.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          {{- if or .Values.server.extraEnvVarsCM .Values.server.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.server.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.server.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.server.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.server.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- end }}
          {{- if .Values.server.resources }}
          resources: {{- toYaml .Values.server.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: server
              containerPort: {{ .Values.server.containerPorts.server }}
            - name: http
              containerPort: {{ .Values.server.containerPorts.http }}
            - name: rmi
              containerPort: {{ .Values.server.containerPorts.rmi }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.server.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.server.livenessProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - sh
                - -c
                - |
                  (cd /bitnami/geode/data && gfsh status server)
          {{- else if .Values.server.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.server.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.server.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.server.readinessProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - sh
                - -c
                - |
                  (cd /bitnami/geode/data && gfsh status server)
          {{- else if .Values.server.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.server.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.server.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.server.startupProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: server
          {{- else if .Values.server.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.server.customStartupProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if .Values.server.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.server.lifecycleHooks "context" $) | nindent 12 }}
          {{- else if and (gt $serverReplicaCount 1) .Values.server.restoreRedundancyOnContainerTermination }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    gfsh -e "connect --locator={{ $locatorSvc }}{{ if .Values.auth.enabled }} --user=$GEODE_SECURITY_USERNAME --password=$GEODE_SECURITY_PASSWORD{{ end }}" -e "restore redundancy"
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /bitnami/geode
            {{- if or .Values.server.configuration .Values.server.existingConfigmap }}
            - name: configuration
              mountPath: /bitnami/geode/config/gemfire.properties
              subPath: gemfire.properties
            {{- end }}
            {{- if or .Values.server.log4j .Values.server.existingLog4jConfigMap }}
            - name: log4j-configuration
              mountPath: /bitnami/geode/config/log4j2.xml
              subPath: log4j2.xml
            {{- end }}
            {{- if .Values.auth.tls.enabled }}
            - name: geode-tls-certificates
              mountPath: /certs
              readOnly: true
            {{- end }}
          {{- if .Values.server.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.server.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.metrics.enabled }}
        - name: metrics
          image: {{ include "geode.metrics.image" . }}
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy }}
          {{- if .Values.metrics.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.metrics.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.metrics.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.metrics.livenessProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - pgrep
                - haproxy
          {{- else if .Values.metrics.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.metrics.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.metrics.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.metrics.readinessProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - pgrep
                - haproxy
          {{- else if .Values.metrics.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.metrics.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: haproxy-configuration
              mountPath: /bitnami/haproxy/conf/haproxy.cfg
              subPath: haproxy.cfg
          ports:
            - name: metrics
              containerPort: {{ .Values.metrics.containerPort }}
        {{- end }}
        {{- if .Values.server.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.server.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        {{- if or .Values.server.configuration .Values.server.existingConfigmap }}
        - name: configuration
          configMap:
            name: {{ include "geode.server.configmapName" . }}
        {{- end }}
        {{- if or .Values.server.log4j .Values.server.existingLog4jConfigMap }}
        - name: log4j-configuration
          configMap:
            name: {{ include "geode.server.log4j.configmapName" . }}
        {{ end }}
        {{- if .Values.auth.tls.enabled }}
        - name: geode-tls-certificates
          secret:
            secretName: {{ printf "%s" (tpl .Values.auth.tls.existingSecret $) }}
            defaultMode: 256
        {{- end }}
        {{- if .Values.metrics.enabled }}
        - name: haproxy-configuration
          configMap:
            name: {{ printf "%s-haproxy-conf" (include "common.names.fullname" .) }}
        {{- end }}
        {{- if .Values.server.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.server.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
  {{- if not .Values.server.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: {{- include "common.labels.matchLabels" . | nindent 10 }}
          app.kubernetes.io/component: server
        {{- if .Values.server.persistence.annotations }}
        annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.server.persistence.annotations "context" $ ) | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.server.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.server.persistence.size | quote }}
        {{- include "common.storage.class" (dict "persistence" .Values.server.persistence "global" .Values.global) | nindent 8 }}
  {{- end }}
